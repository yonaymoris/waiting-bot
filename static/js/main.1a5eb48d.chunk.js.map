{"version":3,"sources":["bot/messages.js","bot/index.js","components/App.js","index.js"],"names":["bot_messages","greeting","good","bad","badFinal","questionReply","defaultConfig","name","delays","maxBadMessages","callback","message","console","log","getRandomIndexInArray","array","Math","floor","random","length","Bot","config","arguments","undefined","Object","classCallCheck","this","_delays","_maxBadMessages","_callback","_init","clearInterval","_timer","_isActive","_badMessagesCount","_availableBadMessages","_this","clearTimeout","setInterval","messages","_queueBadMessage","_this2","isQuestion","replies","_this3","concat","stop","badMessages","msg","splice","_queueGreetingMessage","endsWith","_queueGoodMessage","userName","botConfig","messagesReducer","state","action","content","newMsg","timestamp","Date","now","author","App","chatBot","useState","objectSpread","addMessage","chatLog","useRef","_useReducer","useReducer","_useReducer2","slicedToArray","_useState","_useState2","text","setText","useEffect","start","useLayoutEffect","current","scrollTop","scrollHeight","react_default","a","createElement","className","ref","map","i","key","onSubmit","e","preventDefault","receive","placeholder","type","value","onChange","target","autoFocus","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.1a5eb48d.chunk.js","sourcesContent":["export default {\n    greeting: [\n        'Hi!',\n        'Hello!',\n        'Hi! How are you?',\n        'Hey there!',\n        'Hey...',\n        'Why aren\\'t you messaging me?',\n        'Hey, let\\'s talk!',\n        'Hey, are you busy?',\n        'Thinking about something?',\n        'Would you like to talk?',\n        'Just wanted to ask how you are doing...'\n    ],\n    good: [\n        'That\\'s so funny!',\n        'Very interesting.',\n        'Tell me more.',\n        'Let\\'s talk about life.',\n        'Do you think technology is scary?',\n        'Hey, do you want some coffee?',\n        'I love night sky because sometimes you can see stars there.',\n        'Are you a cat person or dog person?',\n        'I love talking to you, you are so cool.',\n        'Everything you say sounds great.'\n    ],\n    bad: [\n        'Are you busy?',\n        'Did I say something wrong?',\n        'Why aren\\'t you replying?',\n        'Did I do something wrong?',\n        'Did I say something wrong?',\n        'Am I bothering you?',\n        'I am sorry, but this is urgent!',\n        'Did you forget to reply?',\n        'If the person does\\'t reply for a few days, does it mean the person hates you?',\n        'I can\\'t stop overthinking...',\n        'Do you hate me now? Haha',\n        'I keep making excuses to message you... Haha',\n        'Maybe I am overthinking again.',\n        'Is it so hard to spend one minute to reply?',\n        'You\\'ve been online recently but haven\\'t said anything. Are we still cool?',\n        'Am I thinking of it too much?',\n        'It feels like I am the only one so head over this.',\n        'Everyone is so busy...'\n    ],\n    badFinal: [\n        'Fine.',\n        'I am sorry.',\n        'I guess I have done something horrible.',\n        'We should not have talked.',\n        'Whatever...',\n        'I\\'ll just go talk to someone that won\\'t ignore me.'\n    ],\n    questionReply: [\n        'Nice question.',\n        'Oh, I was not ready for such a question.',\n        'I will reply to this question later.',\n        'Oh damn, you asked it! Haha!',\n        'Let\\'s leave this question for later.'\n    ]\n};","import messages from './messages';\n\nconst defaultConfig = {\n    name: 'waiting-bot',\n    delays: {\n        greeting: 10000,\n        good: 1000,\n        bad: 20000\n    },\n    maxBadMessages: 5,\n\n    callback: function (message) {\n        console.log(message);\n    }\n};\n\n/**\n * Get a random index in the provided array.\n * @param {*} array \n */\nfunction getRandomIndexInArray(array) {\n    return (Math.floor(Math.random() * array.length));\n}\n\nclass Bot {\n    constructor(config = defaultConfig) {\n        this.name = config.name;\n        this._delays = config.delays;\n        this._maxBadMessages = config.maxBadMessages;\n        this._callback = config.callback;\n\n        this._init();\n    }\n\n    /**\n     * Reset the variables necessary to put the bot in a clean state.\n     */\n    _init() {\n        clearInterval(this._timer);\n        this._isActive = false;\n        this._badMessagesCount = 0;\n        this._timer = null;\n        this._availableBadMessages = [];\n    }\n\n    /**\n     * Set a timer for a random greeting message.\n     */\n    _queueGreetingMessage() {\n        clearTimeout(this._timer);\n        this._timer = setInterval(() => {\n            const random = getRandomIndexInArray(messages.greeting);\n            this._callback(messages.greeting[random]);\n            this._queueBadMessage();\n        }, this._delays.greeting);\n    }\n\n    /**\n     * Set a timer for a random 'good' message.\n     * @param {*} isQuestion - \n     */\n    _queueGoodMessage(isQuestion = false) {\n        clearTimeout(this._timer);\n        this._timer = setInterval(() => {\n            const replies = (isQuestion) ? messages.questionReply : messages.good;\n            const random = getRandomIndexInArray(replies);\n            this._callback(replies[random]);\n            this._queueBadMessage();\n        }, this._delays.good);\n    }\n\n    /**\n     * Set a timer for a random 'bad' message.\n     */\n    _queueBadMessage() {\n        clearTimeout(this._timer);\n        this._availableBadMessages = this._availableBadMessages.concat(messages.bad);\n\n        this._timer = setInterval(() => {\n            this._badMessagesCount++;\n\n            // Return a 'final' message once we've reached maximum amount of\n            // 'bad' messages\n            if (this._badMessagesCount === this._maxBadMessages) {\n                const random = getRandomIndexInArray(messages.badFinal);\n                this._callback(messages.badFinal[random]);\n                this.stop();\n                return;\n            }\n\n            // Prevent bot from using the same 'bad' message in a 'session'.\n            // Does not handle _maxBadMessages being larger than the length\n            // of the bad messages array.\n            const badMessages = this._availableBadMessages;\n            const random = getRandomIndexInArray(badMessages);\n            const msg = badMessages[random];\n            badMessages.splice(random, 1);\n\n            this._callback(msg);\n\n        }, this._delays.bad);\n    }\n\n    /**\n     * Start the bot. Will automatically set a timer for the greeting message.\n     * Calling this function more than once will not do anything. To restart\n     * the bot, use stop() first and then start().\n     */\n    start() {\n        if (!this._isActive) {\n            this._init();\n            this._isActive = true;\n            this._queueGreetingMessage();\n        }\n    }\n\n    /**\n     * Stop the bot from sending messages.\n     */\n    stop() {\n        clearTimeout(this._timer);\n        this._isActive = false;\n    }\n\n    /**\n     * This function will queue a 'good' message unless the provided message\n     * is falsy.\n     * @param {*} message \n     */\n    receive(message) {\n        if (message) {\n            this._badMessagesCount = 0;\n            this._availableBadMessages = [];\n\n            if (message.endsWith('?')) {\n                this._queueGoodMessage(true);\n            } else {\n                this._queueGoodMessage();\n            }\n        }\n    }\n}\n\nexport default Bot;","import React, { useState, useReducer, useRef, useEffect, useLayoutEffect } from 'react';\nimport Bot from 'bot';\n\n// CONFIGURE OPTIONS HERE\nconst userName = 'You';\nconst botConfig = {\n    name: 'matsu',\n    delays: {\n        greeting: 5000,\n        good: 1000,\n        bad: 10000\n    },\n    maxBadMessages: 5\n};\n\nfunction messagesReducer(state, action) {\n    if (action.content) {\n        const newMsg = {\n            timestamp: Date.now(),\n            author: action.author,\n            content: action.content\n        };\n        return state.concat([newMsg]);\n    }\n\n    return state;\n}\n\nfunction App() {\n    // Callback that gets executed whenever bot has a message to send\n    function onBotMessage(message) {\n        addMessage({\n            author: chatBot.name,\n            content: message\n        });\n    }\n\n    const chatBot = useState(new Bot({\n        ...botConfig,\n        callback: onBotMessage\n    }))[0];\n    const chatLog = useRef(null);\n    const [messages, addMessage] = useReducer(messagesReducer, []);\n    const [text, setText] = useState('');\n\n    function onSubmit(e) {\n        e.preventDefault();\n        addMessage({\n            author: userName,\n            content: text\n        });\n        chatBot.receive(text);\n        setText('');\n    }\n\n    // Start the bot on component mount and stop on unmount\n    useEffect(() => {\n        chatBot.start();\n        return () => chatBot.stop();\n    }, [chatBot]);\n\n    // Scroll to bottom whenever a new message is added\n    useLayoutEffect(() => {\n        chatLog.current.scrollTop = chatLog.current.scrollHeight;\n    }, [messages]);\n\n    return (\n        <div className='container'>\n            <main className='content'>\n                <div className='chat'>\n\n                    <div className='log' ref={chatLog}>\n                        <p className='start-message'>\n                            This is the start of your conversation with {botConfig.name}.\n                        </p>\n\n                        {messages.map((msg, i) => <div key={i}\n                            className={'message' + ((msg.author === userName) ? ' current-user' : '')}\n                        >\n                            <span>{msg.author}: {msg.content}</span>\n                        </div>)}\n                    </div>\n\n                    <form className='input' onSubmit={onSubmit}>\n                        <input\n                            placeholder={`Say something to ${botConfig.name}...`}\n                            type='text'\n                            value={text}\n                            onChange={(e) => setText(e.target.value)}\n                            autoFocus\n                        />\n                    </form>\n\n                </div>\n            </main>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n// eslint-disable-next-line no-unused-vars\nimport styles from 'static/styles.css';\n// eslint-disable-next-line no-unused-vars\nimport additional from 'static/additional.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}